{% extends 'base.html.twig' %}

{% block title %}preparation devis{% endblock %}

{% block body %}
<section id="portfolio" class="section-bg">
    <div class="container">
        <header>
            <h3 class="text-muted">Dernière etape pour voir votre devis !!!</h3>
        </header>
        <div class="row align-items-center">
            <div class="col">
                <div class="media">
                    <img class="mr-3" src="{{ produit.image.path }}" alt="{{ produit.nom }}">
                    <div class="media-body">
                        <h5 class="mt-0">{{ produit.nom }}</h5>
                        {{ produit.description }}
                    </div>
                </div>
            </div>
            <div class="col">
                <form action="{{ path('ajout_produit', {'id': produit.id}) }}" method="get">
                    {#<div>
                        <input id="quantite" type="range" class="form-control" min="30" max="600"
                               name="quantite" step="30">
                        <output for="quantite" onchange="this.form.submit()"></output>
                    </div>#}
                    <select name="quantite" style="width: 250px" onchange="this.form.submit()" >
                        {% for i in  30..600 %}
                            <option value="{{ i }}">{{ i }}</option>
                        {% endfor %}
                    </select>
                </form>

{#                <label for="quantite">Choissisez la quantité de produit a reparer </label>#}
            </div>
        </div>
    </div>
</section>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        $(function() {
            var el, newPoint, newPlace, offset;

            // Select all range inputs, watch for change
            $("input[type='range']").change(function() {

                // Cache this for efficiency
                el = $(this);

                // Measure width of range input
                width = el.width();

                // Figure out placement percentage between left and right of input
                newPoint = (el.val() - el.attr("min")) / (el.attr("max") - el.attr("min"));

                // Janky value to get pointer to line up better
                offset = -1.3;

                // Prevent bubble from going beyond left or right (unsupported browsers)
                if (newPoint < 0) { newPlace = 0; }
                else if (newPoint > 1) { newPlace = width; }
                else { newPlace = width * newPoint + offset; offset -= newPoint; }

                // Move bubble
                el
                    .next("output")
                    .css({
                        left: newPlace,
                        marginLeft: offset + "%"
                    })
                    .text(el.val());
            })
            // Fake a change to position bubble at page load
                .trigger('change');
        });
    </script>
{% endblock %}


